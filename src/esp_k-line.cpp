#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPUpdateServer.h>
#include "LittleFS.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <pgmspace.h>

const char *ssid = "K-Line_Adapter";
const char *password = "12345678";
static const unsigned char PROGMEM anime2[] = {0x20, 0x0, 0x0, 0x3, 0xe0, 0xf, 0xe0, 0x0, 0xf, 0x1f, 0x80, 0x0,
                                               0x0, 0x1, 0x0, 0x4, 0x40, 0x0, 0x0, 0x3, 0xf0, 0xf, 0xe0, 0x0,
                                               0x1f, 0x8f, 0xe0, 0x0, 0x0, 0x3, 0x80, 0x4, 0xc0, 0x0, 0x0,
                                               0x3, 0xf0, 0x7, 0xf0, 0x0, 0x1f, 0x87, 0xf8, 0x0, 0x0, 0x7,
                                               0xc0, 0x2, 0x0, 0x0, 0x0, 0x3, 0xf8, 0x7, 0xf8, 0x0, 0x1f,
                                               0xc3, 0xfc, 0x0, 0x0, 0x7, 0xc0, 0x2, 0x0, 0x0, 0x0, 0x7,
                                               0xf8, 0x7, 0xfc, 0x0, 0x1f, 0xf3, 0xff, 0x0, 0x0, 0x7, 0xe0,
                                               0x2, 0x0, 0x0, 0x0, 0x7, 0xfc, 0x3, 0xfe, 0x0, 0x1f, 0xf9,
                                               0xff, 0xc0, 0x0, 0x7, 0xe0, 0x1, 0x0, 0x0, 0x0, 0x7, 0xfe,
                                               0x3, 0xff, 0x0, 0x1f, 0xfc, 0xff, 0xe0, 0x0, 0x7, 0xe0, 0x1,
                                               0x0, 0x0, 0x0, 0x7, 0xfe, 0x3, 0xff, 0x80, 0x1f, 0xfe, 0x7f,
                                               0xf0, 0x0, 0x3, 0xe0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x6, 0x1, 0xff,
                                               0xc0, 0x1f, 0xf8, 0x3f, 0xf0, 0x0, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0,
                                               0x0, 0x0, 0x1, 0xff, 0xe0, 0x1f, 0xe3, 0xdf, 0x8, 0x0, 0x1, 0xf0,
                                               0x0, 0x0, 0x0, 0x0, 0x3, 0xfc, 0x10, 0xff, 0xf0, 0x3f, 0x8f, 0xe0,
                                               0x3c, 0x0, 0x1, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0xc9, 0x7f, 0xfc,
                                               0x3e, 0x7e, 0x0, 0x0, 0x0, 0x1, 0xb0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xed,
                                               0xbf, 0xfe, 0x1c, 0xfc, 0x0, 0x1e, 0x0, 0x0, 0xb0, 0x0, 0x0, 0x0, 0x0, 0x3,
                                               0xff, 0xe4, 0xdf, 0xfe, 0xf, 0xf8, 0x0, 0x5e, 0x0, 0x0, 0xb0, 0x0, 0x0, 0x0,
                                               0x0, 0x3, 0xff, 0xe6, 0xef, 0xfe, 0x7, 0xe0, 0x10, 0x9d, 0x0, 0x0, 0xb0, 0x0,
                                               0x0, 0x0, 0x0, 0x3, 0xff, 0xf2, 0x73, 0xfe, 0x63, 0x80, 0x41, 0x33, 0x80, 0x0,
                                               0xf0, 0x0, 0x3f, 0xff, 0xff, 0xc3, 0xff, 0xf9, 0x7c, 0xfe, 0x61, 0x43, 0x22, 0x6f,
                                               0x80, 0x0, 0x70, 0x0, 0x21, 0x11, 0x7, 0xc3, 0xff, 0xfd, 0xbf, 0x3e, 0xf6, 0x87, 0x80,
                                               0xdf, 0x80, 0x0, 0x70, 0x0, 0x2d, 0x77, 0xdf, 0xc3, 0xff, 0xfe, 0xff, 0xfd, 0xf7, 0x3f,
                                               0xff, 0xbf, 0xc0, 0x0, 0x60, 0x0, 0x21, 0x11, 0xdf, 0xc3, 0xff, 0xff, 0x3f, 0xfd, 0xff,
                                               0x7f, 0xff, 0x7f, 0xc0, 0x0, 0x60, 0x0, 0x2f, 0x77, 0xdf, 0xc3, 0xf0, 0x1f, 0xbf, 0xfb,
                                               0xff, 0xff, 0xfc, 0xff, 0xc0, 0x0, 0x60, 0x0, 0x2f, 0x77, 0xdf, 0xc3, 0xff, 0xc7, 0xff,
                                               0xf7, 0xff, 0xff, 0x43, 0xff, 0xc0, 0x0, 0x40, 0x0, 0x2f, 0x77, 0xdd, 0x40, 0xff, 0xff,
                                               0xff, 0xef, 0xff, 0xff, 0xff, 0xfb, 0xe0, 0x0, 0x0, 0x0, 0x3f, 0xff, 0xff, 0xc3, 0xfe, 0xf,
                                               0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x7, 0xe0, 0x0, 0xff,
                                               0xff, 0xff, 0xff, 0xfb, 0x6f, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x7, 0x80, 0x0, 0xff, 0xff,
                                               0xff, 0xff, 0xf6, 0xdf, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x40, 0x7f, 0xff, 0xff, 0xff,
                                               0xed, 0xbf, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x1, 0x1, 0x7f, 0xff, 0xef, 0xff, 0xdb, 0x7f, 0xf0,
                                               0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0xc, 0x82, 0x1f, 0xff, 0x7f, 0xff, 0xb7, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0,
                                               0x0, 0x0, 0x5, 0xfe, 0x1, 0xff, 0xfb, 0xdf, 0xff, 0x6f, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff,
                                               0x83, 0x7f, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xff, 0xfd, 0xfb, 0xb7, 0xff,
                                               0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xff, 0xe3, 0xee, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xfc,
                                               0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 0x1f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0,
                                               0x6, 0x3, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x1b, 0xff, 0xfb, 0xff,
                                               0xdf, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x1d, 0xff, 0xb7, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff,
                                               0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x9d, 0xff, 0x6f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0,
                                               0x7, 0x9c, 0xfe, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x9e, 0xfd, 0xbf, 0xff, 0xff,
                                               0xff, 0xff, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x9e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0,
                                               0x0, 0x0, 0x0, 0x0, 0x7, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x9f, 0x3f,
                                               0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x9f, 0xbf, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
                                               0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xdf, 0x9f, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                               0x7, 0xdf, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xdf, 0x9f, 0xff, 0xff, 0xff, 0xff,
                                               0xff, 0xff, 0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xdf, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x1, 0x0,
                                               0x0, 0x7, 0xdf, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x7, 0xdf, 0x87, 0xff, 0xff, 0xff, 0xff,
                                               0xff, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x11, 0x0, 0x40, 0x7, 0xdf, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0, 0x0, 0x11, 0x0,
                                               0x40, 0x7, 0xdf, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x29, 0x0, 0x40, 0x7, 0xdf, 0xc1, 0xff, 0xff, 0xff, 0xff,
                                               0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x29, 0x0, 0x40, 0x7, 0xdf, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x29, 0x80,
                                               0xa0, 0x7, 0xef, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0x3, 0xff, 0xff, 0x80, 0x0, 0x0, 0x4a, 0x40, 0xa0, 0x3, 0xef, 0xc0, 0x3f, 0xff, 0xff, 0xfc,
                                               0x78, 0xff, 0xff, 0x80, 0x0, 0x20, 0x52, 0x40, 0xa0, 0x3, 0xef, 0xc0, 0x1f, 0xff, 0xff, 0xf9, 0xce, 0xff, 0xff, 0x0, 0x2, 0x20, 0x92, 0x40,
                                               0x90, 0x1, 0xf7, 0xc0, 0xf, 0xff, 0xff, 0x72, 0x31, 0xff, 0xfe, 0x0, 0x2, 0x50, 0x92, 0x20, 0x90, 0x1, 0xf7, 0xe0, 0x7, 0xff, 0xff, 0x0, 0xf,
                                               0xff, 0xfe, 0x0, 0x5, 0x50, 0xa4, 0x20, 0x90, 0x10, 0xf7, 0xf0, 0x3, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xfd, 0x0, 0x5, 0x50, 0xa4, 0x10, 0x90, 0x28,
                                               0x7b, 0xf8, 0x1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x0, 0x9, 0x51, 0x28, 0x10, 0x90, 0x28, 0x7b, 0xfc, 0x0, 0x7f, 0xff, 0xff, 0xef, 0xff, 0xf7,
                                               0x0, 0x9, 0x52, 0x48, 0x10, 0x88, 0x28, 0x3b, 0xfe, 0x0, 0x3f, 0xff, 0xe7, 0x9f, 0xff, 0xef, 0x0, 0x10, 0x94, 0x50, 0x10, 0x88, 0x24, 0x3d, 0xff,
                                               0x0, 0xf, 0xff, 0xf8, 0x7f, 0xff, 0xdf, 0x0, 0x10, 0x94, 0x60};

ESP8266WebServer server(80);
ESP8266HTTPUpdateServer httpUpdater;
String serialData;
unsigned long lastUpdate = 0;

// Настройки OLED дисплея
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define ANIME2_WIDTH 128
#define ANIME2_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Буфер для отображения на OLED
String oledLines[8];
int currentLine = 0;

// Функции для работы с OLED дисплеем
void updateOledDisplay()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);

  for (int i = 0; i < 8; i++)
  {
    if (oledLines[i].length() > 0)
    {
      display.println(oledLines[i]);
    }
  }

  display.display();
}

void addToOledDisplay(const String &line)
{
  String displayLine = line;
  if (displayLine.length() > 21)
  {
    displayLine = displayLine.substring(0, 21);
  }

  if (currentLine >= 7)
  {
    for (int i = 0; i < 7; i++)
    {
      oledLines[i] = oledLines[i + 1];
    }
    oledLines[7] = displayLine;
  }
  else
  {
    oledLines[currentLine] = displayLine;
    currentLine++;
  }
  updateOledDisplay();
}

void clearOledDisplay()
{
  for (int i = 0; i < 8; i++)
  {
    oledLines[i] = "";
  }
  currentLine = 0;
  updateOledDisplay();
}

// Функции для работы с KWP2000
String createKwpFrame(const String &command)
{
  String cleanCommand = command;
  cleanCommand.replace(" ", "");
  int len = cleanCommand.length() / 2;

  if (len == 0 || cleanCommand.length() % 2 != 0)
  {
    return "";
  }

  String frame = "";
  byte formatByte = 0xC0 | (len + 2);
  frame += (char)formatByte;
  frame += (char)0x10;
  frame += (char)0xF1;

  for (int i = 0; i < len; i++)
  {
    String byteStr = cleanCommand.substring(i * 2, i * 2 + 2);
    byte dataByte = (byte)strtol(byteStr.c_str(), NULL, 16);
    frame += (char)dataByte;
  }

  byte checksum = 0;
  for (size_t i = 0; i < frame.length(); i++)
  {
    checksum += frame[i];
  }
  frame += (char)checksum;

  return frame;
}

String toHexString(const String &data)
{
  String result;
  result.reserve(data.length() * 3);

  for (size_t i = 0; i < data.length(); i++)
  {
    if (i > 0)
      result += " ";
    char buf[3];
    sprintf(buf, "%02X", (unsigned char)data[i]);
    result += buf;
  }
  return result;
}

String parseKwpFrame(const String &frame)
{
  if (frame.length() < 5)
    return "Invalid frame";

  String result;
  result.reserve(100);

  byte checksum = 0;
  for (size_t i = 0; i < frame.length() - 1; i++)
  {
    checksum += frame[i];
  }

  if ((byte)frame[frame.length() - 1] != checksum)
  {
    return "Checksum error";
  }

  byte targetAddr = frame[1];
  byte sourceAddr = frame[2];

  result += "Target: 0x";
  char buf[3];
  sprintf(buf, "%02X", targetAddr);
  result += buf;

  result += " Source: 0x";
  sprintf(buf, "%02X", sourceAddr);
  result += buf;

  result += " Data: ";
  for (size_t i = 3; i < frame.length() - 1; i++)
  {
    sprintf(buf, "%02X ", (unsigned char)frame[i]);
    result += buf;
  }

  return result;
}

String getTime()
{
  unsigned long seconds = millis() / 1000;
  unsigned long minutes = seconds / 60;
  unsigned long hours = minutes / 60;
  seconds %= 60;
  minutes %= 60;
  char buf[10];
  sprintf(buf, "%02lu:%02lu:%02lu", hours, minutes, seconds);
  return String(buf);
}

// Функции для работы с веб-сервером
void handleRoot()
{
  File file = LittleFS.open("/index.html", "r");
  if (!file)
  {
    server.send(500, "text/plain", "Ошибка открытия файла");
    return;
  }

  server.streamFile(file, "text/html");
  file.close();
}

void handleCSS()
{
  File file = LittleFS.open("/style.css", "r");
  if (!file)
  {
    server.send(404, "text/plain", "File not found");
    return;
  }

  server.streamFile(file, "text/css");
  file.close();
}

void handleNotFound()
{
  String message = "File Not Found\n\n";
  server.send(404, "text/plain", message);
}

void handleData()
{
  server.send(200, "text/html", serialData);
}

void handleSend()
{
  if (server.hasArg("cmd"))
  {
    String command = server.arg("cmd");
    String kwpFrame = createKwpFrame(command);

    if (kwpFrame.length() == 0)
    {
      server.send(400, "text/plain", "Invalid command");
      return;
    }

    for (size_t i = 0; i < kwpFrame.length(); i++)
    {
      Serial.print(kwpFrame[i]);
    }

    String timeStr = getTime();
    String logEntry = "[" + timeStr + "] TX: " + command + " (Frame: " + toHexString(kwpFrame) + ")";
    serialData += logEntry + "<br>";

    // Ограничиваем размер serialData чтобы избежать переполнения памяти
    if (serialData.length() > 4000)
    {
      int cutIndex = serialData.indexOf('<', 1000);
      if (cutIndex != -1)
      {
        serialData = serialData.substring(cutIndex);
      }
    }

    addToOledDisplay("TX:" + command + toHexString(kwpFrame));
  }
  server.send(200, "text/plain", "OK");
}

void handleClear()
{
  serialData = "Лог очищен<br>";
  clearOledDisplay();
  addToOledDisplay("Log clear");
  server.send(200, "text/plain", "OK");
}

void setup()
{
  Serial.begin(10400);
  delay(1000);

  // Резервируем память для serialData
  serialData.reserve(5000);

  // Инициализация OLED дисплея
  Wire.begin(4, 5);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println("OLED не инициализирован!");
    // Продолжаем работу даже без дисплея
  }
  else
  {
    // Показываем заставку при включении
    display.clearDisplay();
    display.drawBitmap(0, 0, anime2, 128, 64, SSD1306_WHITE);
    display.display();
    delay(2000); // Показываем заставку 2 секунды
  }

  // Инициализация файловой системы
  if (!LittleFS.begin())
  {
    Serial.println("Failed to mount file system");
    // Продолжаем работу даже без файловой системы
  }

  // Настройка WiFi
  WiFi.softAP(ssid, password);
  IPAddress myIP = WiFi.softAPIP();

  // Настройка сервера
  httpUpdater.setup(&server, "/firmware", "admin", "12345");
  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.on("/send", handleSend);
  server.on("/clear", handleClear);
  server.on("/style.css", handleCSS);
  server.onNotFound(handleNotFound);
  server.begin();

  // Обслуживание статических файлов
  server.serveStatic("/style.css", LittleFS, "/style.css");
  server.serveStatic("/script.js", LittleFS, "/script.js");

  // Добавляем начальное сообщение
  serialData = "K-Line launch<br>";
  serialData += "IP адрес: " + myIP.toString() + "<br>";
  serialData += "Speed: 10400 baud<br>";
  serialData += "Protocol: KWP2000<br>";

  // Инициализация OLED дисплея
  if (display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    clearOledDisplay();
    addToOledDisplay("    K-Line Adapter");
    addToOledDisplay("IP: " + myIP.toString());
    addToOledDisplay("Speed: 10400");
    addToOledDisplay("KWP2000 ready");
  }
}

void loop()
{
  server.handleClient();

  // Чтение данных из последовательного порта
  if (Serial.available() > 0)
  {
    String data = Serial.readString();
    String timeStr = getTime();
    String logEntry = "[" + timeStr + "] RX: " + toHexString(data);
    serialData += logEntry + "<br>";

    // Ограничиваем размер serialData чтобы избежать переполнения памяти
    if (serialData.length() > 4000)
    {
      int cutIndex = serialData.indexOf('<', 1000);
      if (cutIndex != -1)
      {
        serialData = serialData.substring(cutIndex);
      }
    }

    // Добавляем на дисплей (обрезаем до 21 символа)
    String displayLine = "RX: " + toHexString(data);
    addToOledDisplay(displayLine);
  }

  delay(10);
}